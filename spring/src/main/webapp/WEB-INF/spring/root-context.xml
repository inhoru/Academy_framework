<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:tx="http://www.springframework.org/schema/tx"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

   <!-- DB연결하는 객체 bean으로 등록하기 -->
   <!-- 
      1. DataSource클래스 -> DB에 접속하는 정보를 제공해주는 bean -> BasicDataSource클래스(dbcp)
      2. SqlSessionFactory클래스 -> SqlSession을 생성해주는 클래스 -> SqlSessionFactoryBean클래스(mybatis-spring)
      3. SqlSession클래스 -> 사용하는 클래스(SQL문 실행, Connection 관리) -> SqlSessionTemplate클래스(mybatis-spring)
    -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
       <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
       <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
       <property name="username" value="spring"/>
       <property name="password" value="spring"/>
    </bean>
    
    <!-- log4jdbc-remix -->
    <bean id="proxyDataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
       <constructor-arg index="0" ref="dataSource"/>
       <property name="logFormatter">
          <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
             <property name="loggingType" value="MULTI_LINE"/>
             <property name="sqlPrefix" value="[SQL]"/>
          </bean>
       </property>
    </bean>
    
    <!-- log4jdbc-remix가 중간 매개체가 되기 때문에 id값을 ref값으로 줌 -->    
    <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
       <property name="dataSource" ref="proxyDataSource"/>
       <property name="configLocation" value="classpath:mybatis-config.xml"/>
       <property name="mapperLocations" value="classpath:mappers/**/*.xml"/>
       <!-- mappers 아래 있는 **(하위폴더까지 전체) *은 단일 값 -->
    </bean>
    
    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
       <constructor-arg index="0" ref="sessionFactory"/>
    </bean>
    
    <!--
        트랜잭션 설정하기
        DataSourceTransactionManager클래스를 bean으로 등록
        1. 어노테이션 방식으로 설정하기
        <tx:annotation-driven>태그를 설정 
     -->
     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="proxyDataSource"/>
     </bean>
     <!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
    
    <!-- 2. xml 방식으로 선언하기(선언적 방식) -->
    <tx:advice id="txadvice" transaction-manager="transactionManager">
       <tx:attributes>
          <tx:method name="insert*"/>
       </tx:attributes>
    </tx:advice>
    
    <aop:config>
       <aop:pointcut expression="within(com.bs.spring..*ServiceImpl)" id="transpo"/>
       <aop:advisor advice-ref="txadvice" pointcut-ref="transpo"/>
    </aop:config>    
    

</beans>