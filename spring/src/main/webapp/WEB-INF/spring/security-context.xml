<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.8.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
		
		
	<!-- 암호화처리 클래스를 빈으로 등록하기 -->	
	<bean id="bcryptPassword" 
	class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
		
	<!-- security모듈로 클라이언트 인증처리하는 설정 -->
	<!--auto-config="true" : 자동으로 설정해주는 속성  -->
	<security:http auto-config="true">
		<!--
		 로그인 인증처리 
		id, password를 입력받아서 DB나 저장소에 등록한것과 일치여부확인 session에 저장
		-> security 이 위임받음 로그인에대한 처리는 security가알아서 처리해줌
		security : form login태그를 이용한다. (login 로직을 만들지않아도된다.)
		속석을 이용해서 설정함
		username-parameter: 로그인 폼에서 제공하는 id 의 name값 ->key 
		password-parameter: 로그인 폼에서 제공하는 password 의 name값 -> key
		login-page: 기본로그인 페이지가 아닌 커스터마이징한 로그인 페이지를 등록할때 사용(로그인 페이지 주소를 지정)
		default-target-url: 로그인 성공시 연결되는 주소
		authentication-failure-forward-url: 인증과정에서 인증이 실패했을대 연결되는 주소 (RequestMapping ("주소")) 의 주소를 설정한다 
		authentication-success-forward-url: 인증과정에서 인증이 성공했을때 연결되는 주소 (RequestMapping ("주소")) 의 주소를 설정한다
		login-procession-url: 인증처리할 요청주소(로그인 페이지 form에 action에 입력할 주소 지정)
	-->
	<security:form-login username-parameter="userId" password-parameter="password" login-page="/loginPage" login-processing-url="/loginEnd"
	default-target-url="/" authentication-failure-forward-url="/error.do" authentication-success-forward-url="/successLogin.do"/>
	
	<security:csrf disabled="true"/>
	
	<!-- 
	인증처리할 서비스를 등록
	security:intercetor-url태그를 이용헤서 등록
	기본적으로 모든 url에 대해 인증처리등록 (로그인없이이용가능한것들만 빼면서 사용한다)
	예외사항에 대해 추가등록하는 방식으로 설정
	속성설정
	pattern : 해당하는 url주소 -> 패턴방식으로 설정
	access : 이용권환에 대한 설정 permitAll(): 누구나상관없이 전부다이용가능 , hasRole("역할이름"),hasAnyRole("역할이름",""),hasAnyAuthority(""), hasAuthority("")
	 -->
	 <!--위에서부터 순차적으로 처리를 한다   -->
	<security:intercept-url pattern="/loginPage" access="permitAll()"/>
	<security:intercept-url pattern="/logoutsuccess" access="permitAll()"/>
	<security:intercept-url pattern="/resources/**" access="permitAll()"/>
	<security:intercept-url pattern="/member/enrollMember.do" access="permitAll()"/>
	<security:intercept-url pattern="/member/insertMember.do" access="permitAll()"/>
	<security:intercept-url pattern="/admin/**" access="hasAuthority('admin')"/>
	<security:intercept-url pattern="/manager/**" access="hasAnyAuthority('admin','manager')"/>
	<security:intercept-url pattern="/**" access="hasAnyAuthority('user','admin','manager')"/>
	 
	 <!--
	 	logout에 대한 설정
	 	security : logout태그를 이용한다.
	 	logout-url : 로그아웃을 처리하는 url주소를 설정
	 	logout-success-url : 로그아웃후 처리할 서비스가 있으면 설정
	   -->
	  <security:logout logout-url="/seculogout.do"/> <!-- logout-success-url="/logoutsuccess"/ -->
			
	
	<!-- 권환이 부족한 사용자가 접속했을때 커스텀페이지로 연결하기  -->
	<security:access-denied-handler error-page="/WEB-INF/views/common/error/authentication.jsp"/>
	</security:http>	
	
	<security:authentication-manager>
		<!--
		 
		 1. 인메모리 인증처사용자인증 처리에 대한설정 리 : 사용자에 대해 직접 작성 
		 2. DB와 연동해서 인증처리 : DB에있는 정보를 가져옴
		 -->
		 <security:authentication-provider user-service-ref="loginService">
		 
		 <!-- 인메모리 인증처리 -->
		 	<!-- <security:user-service>
		 		<security:user name="admin" authorities="ROLE_ADMIN" password="$2a$10$y9AZstoaHfyQrInJlkWAZuQDe.tlUCmHXxoqUPU5ka.fZLEcfYd4a"/>
		 		<security:user name="user01" authorities="ROLE_USER" password="$2a$10$y9AZstoaHfyQrInJlkWAZuQDe.tlUCmHXxoqUPU5ka.fZLEcfYd4a"/>
		 	</security:user-service>
		 	<security:password-encoder ref="bcryptPassword"/> -->
		 	<security:password-encoder ref="bcryptPassword"/>
		 	
		 	
		 	<!--db에서 연동 인증처리  -->
		 	
		 </security:authentication-provider>
	</security:authentication-manager>
	
	  <bean id="dao" class="com.bs.spring.member.model.dao.MemberDaoImpl"/>
	<bean id="loginService" class="com.bs.spring.security.controller.SecurityLoginSerivce">
		<constructor-arg index="0" ref="dao"/>
		<constructor-arg index="1" ref="sessionTemplate"/>
	</bean>
	
</beans>		